//
//  EratosfenWorker.swift
//  RPEratosfen
//
//  Created by Юрий on 27.05.17.
//  Copyright (c) 2017 Юрий. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import Foundation

class EratosfenWorker {
    
    // MARK: Business Logic
    
    func eratosfen(number: Int, completionHandler: @escaping ([Int]) -> Void) {
        NSLog("start simple eratosfen")
        var S: [Bool] = [false, false]
    
        for _ in 2...number {
            S.append(true)
        }
        
        var k = 3
        while k * k <= number {
            var l = k * k
            
            while l <= number {
                S[l] = false
                l += 2 * k
            }
            
            repeat {
                k += 2
            } while (!S[k])
        }
        
        var result: [Int] = [2]
        var i = 3
        while i <= number {
            if S[i] {
                result.append(i)
            }
            i += 2
        }
        NSLog("finish simple eratosfen")
        completionHandler(result)
    }
    
    func eratosfenWheelFactorization(number: Int, completionHandler: @escaping ([Int]) -> Void) {
        // 3# 2 * 3
        // let fprimes: [Int] = [1, 5]
        
        // 5# 2 * 3 * 5
        let fprimes: [Int] = [1, 7, 11, 13, 17, 19, 23, 29]
        
        var maxk: [Int] = []
        for i in 0...(fprimes.count-1) {
            maxk.append(Int((number - fprimes[i]) / 30))
        }
        
        // init sieve
        var S: [[Bool]] = []
        for i in 0...(fprimes.count-1) {
            var Sieve: [Bool] = []
            for _ in 0...maxk[i] {
                Sieve.append(true)
            }
            S.append(Sieve)
        }
        
        // not working
        
        var result: [Int] = [2, 3]
        for i in 0...maxk.max()! {
            for j in 0...(fprimes.count-1) {
                if S[j].first != nil && S[j].first! {
                    result.append(Int(30 * i + fprimes[j]))
                }
                S[j].removeFirst()
            }
        }
        
        completionHandler(result)
    }
}
